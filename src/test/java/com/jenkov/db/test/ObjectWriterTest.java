package com.jenkov.db.test;

import com.jenkov.db.impl.ObjectReader;
import com.jenkov.db.impl.ObjectWriter;
import com.jenkov.db.impl.SqlGenerator;
import com.jenkov.db.impl.PersistenceConfiguration;
import com.jenkov.db.impl.mapping.ObjectMapper;
import com.jenkov.db.impl.mapping.ObjectMappingFactory;
import com.jenkov.db.itf.*;
import com.jenkov.db.itf.mapping.IObjectMapper;
import com.jenkov.db.itf.mapping.IObjectMapping;
import com.jenkov.db.test.objects.PersistentObject;
import com.jenkov.db.test.objects.TableWithAutoIncrement;
import com.jenkov.db.util.JdbcUtil;
import com.jenkov.db.PersistenceManager;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author Jakob Jenkov,  Jenkov Development
 */
public class ObjectWriterTest {

    protected IObjectReader reader    = null;
    protected IObjectWriter writer    = null;
    protected IObjectMapper mapper    = null;
    protected ISqlGenerator generator = null;
    protected Connection    connection= null;
    protected SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    protected IPersistenceConfiguration configuration = new PersistenceConfiguration(null);

    @BeforeEach
    public void setUp() throws Exception{
        this.reader = new ObjectReader();
        this.writer = new ObjectWriter();
        this.mapper = new ObjectMapper(new ObjectMappingFactory());
        this.generator = new SqlGenerator();
        this.connection = Environment.getConnection();
        this.reader.setDatabase(Database.determineDatabase(connection));
        this.writer.setDatabase(Database.determineDatabase(connection));
    }

    @AfterEach
    public void tearDown(){
        this.reader = null;
        this.writer = null;
        this.mapper = null;
        this.generator = null;
        JdbcUtil.closeIgnore(this.connection);
    }


    @Test
    public void testInsertUpdateDelete() throws Exception{
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = null;
        IObjectMapping mapping = null;

        try {
            Environment.executeSql(Environment.DELETE_PERSISTENT_OBJECT);
            
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name");
            object1.setAutoColumn(this.dateFormat.parse("2004-01-01"));

            UpdateResult result = this.writer.insert(mapping, object1, this.generator.generateInsertStatement(mapping), this.connection);
            assertEquals(0, result.getGeneratedKeys().size());   // no generated keys, when inserting into table that does not generate keys.
            object2 = (PersistentObject) this.reader.read(mapping, "select * from persistent_object where id=1",
                    this.connection);
            assertObject1ReadCorrectly(object2);

            object1.setName("name changed");
            object1.setAutoColumn(this.dateFormat.parse("2004-01-01"));
            this.writer.update(mapping, object1, this.generator.generateUpdateStatement(mapping), connection);
            object2 = (PersistentObject) this.reader.read(mapping, "select * from persistent_object where id=1",
                        this.connection);

            assertEquals(1, object2.getId(), "wrong id");
            assertEquals("name changed", object2.getName(), "wrong name");

            if(Environment.DATABASE == Environment.MYSQL){
                assertFalse (object2.getAutoColumn().equals(this.dateFormat.parse("2004-01-01")),
                        "auto column should have auto generated date");
            }
        } finally {
            Environment.executeSql(Environment.DELETE_PERSISTENT_OBJECT);
            //this.writer.delete(mapping, object1, this.generator.generateDeleteStatement(mapping), this.connection);
//            JdbcUtil.close(this.connection);
        }
    }

    @Test
    public void testUpdateWithOldPrimaryKeyValue() throws Exception{
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = null;
        IObjectMapping mapping   = null;

        try {
//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name");
            object1.setAutoColumn(this.dateFormat.parse("2004-01-01"));

            this.writer.insert(mapping, object1, this.generator.generateInsertStatement(mapping), this.connection);
            object2 = (PersistentObject) this.reader.read(mapping, "select * from persistent_object where id=1",
                    this.connection);
            assertObject1ReadCorrectly(object2);

            object1.setName("name changed");
            object1.setAutoColumn(this.dateFormat.parse("2004-01-01"));
            object1.setId(2);
            this.writer.update(mapping, object1, new Long(1), this.generator.generateUpdateStatement(mapping), connection);
            object2 = (PersistentObject) this.reader.read(mapping, "select * from persistent_object where id=2",
                        this.connection);

            assertEquals(2, object2.getId(), "wrong id");
            assertEquals("name changed", object2.getName(), "wrong name");

            if(Environment.DATABASE == Environment.MYSQL){
                assertFalse (object2.getAutoColumn().equals(this.dateFormat.parse("2004-01-01")),
                        "auto column should have auto generated date");
            }
        } finally {
            this.writer.delete(mapping, object1, this.generator.generateDeleteStatement(mapping), this.connection);
//            JdbcUtil.close(this.connection);
        }

    }

    @Test
    public void testInsertBatch() throws Exception {
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = new PersistentObject();
        PersistentObject object  = null;

        IObjectMapping mapping = null;
        List objects     = new ArrayList();
        List objectsRead = null;

        try {
//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name1");
            objects.add(object1);

            object2.setId(2);
            object2.setName("name2");
            objects.add(object2);

            this.writer.insertBatch(mapping, objects, this.generator.generateInsertStatement(mapping), this.connection);
            objectsRead = this.reader.readList(mapping, "select * from persistent_object order by id", this.connection);

            object = (PersistentObject) objectsRead.get(0);
            assertEquals(1      , object.getId(), "wrong id");
            assertEquals("name1", object.getName(), "wrong name");

            object = (PersistentObject) objectsRead.get(1);
            assertEquals(2      , object.getId(), "wrong id");
            assertEquals("name2", object.getName(), "wrong name");

        } finally {
            this.writer.deleteByPrimaryKey(mapping, new Long(1), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(2), this.generator.generateDeleteStatement(mapping), this.connection);
        }
    }


    @Test
    public void testUpdateBatch() throws Exception {
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = new PersistentObject();
        PersistentObject object  = null;

        IObjectMapping mapping = null;
        List objects     = new ArrayList();
        List objectsRead = null;

        try {
//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name1");
            objects.add(object1);

            object2.setId(2);
            object2.setName("name2");
            objects.add(object2);

            this.writer.insertBatch(mapping, objects, this.generator.generateInsertStatement(mapping), this.connection);

            object1.setName("name11");
            object2.setName("name22");
            this.writer.updateBatch(mapping, objects, this.generator.generateUpdateStatement(mapping), this.connection);


            objectsRead = this.reader.readList(mapping, "select * from persistent_object order by id", this.connection);

            object = (PersistentObject) objectsRead.get(0);
            assertEquals(1      , object.getId(), "wrong id");
            assertEquals("name11", object.getName(), "wrong name");

            object = (PersistentObject) objectsRead.get(1);
            assertEquals(2      , object.getId(), "wrong id");
            assertEquals("name22", object.getName(), "wrong name");

        } finally {
            this.writer.deleteByPrimaryKey(mapping, new Long(1), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(2), this.generator.generateDeleteStatement(mapping), this.connection);
        }
    }


    @Test
    public void testUpdateBatchWithOldPrimaryKeyValue() throws Exception {
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = new PersistentObject();
        PersistentObject object  = null;

        IObjectMapping mapping = null;
        List objects     = new ArrayList();
        List primaryKeys = new ArrayList();
        List objectsRead = null;

        try {
//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name1");
            objects.add(object1);

            object2.setId(2);
            object2.setName("name2");
            objects.add(object2);

            this.writer.insertBatch(mapping, objects, this.generator.generateInsertStatement(mapping), this.connection);

            object1.setName("name11");
            object1.setId(11);
            primaryKeys.add(new Long(1));

            object2.setName("name22");
            object2.setId(22);
            primaryKeys.add(new Long(2));
            this.writer.updateBatch(mapping, objects, primaryKeys, this.generator.generateUpdateStatement(mapping), this.connection);

            objectsRead = this.reader.readList(mapping, "select * from persistent_object order by id", this.connection);

            assertEquals(2, objectsRead.size(), "wrong object count");

            object = (PersistentObject) objectsRead.get(0);
            assertEquals(11      , object.getId(), "wrong id");
            assertEquals("name11", object.getName(), "wrong name");

            object = (PersistentObject) objectsRead.get(1);
            assertEquals(22      , object.getId(), "wrong id"  );
            assertEquals("name22", object.getName(), "wrong name");

        } finally {
            this.writer.deleteByPrimaryKey(mapping, new Long(1), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(2), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(11), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(22), this.generator.generateDeleteStatement(mapping), this.connection);
        }
    }


    @Test
    public void testDeleteBatch() throws Exception {
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = new PersistentObject();

        IObjectMapping mapping = null;
        List objects     = new ArrayList();
        List objectsRead = null;

        try {
//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name1");
            objects.add(object1);

            object2.setId(2);
            object2.setName("name2");
            objects.add(object2);

            this.writer.insertBatch(mapping, objects, this.generator.generateInsertStatement(mapping), this.connection);
            this.writer.deleteBatch(mapping, objects, this.generator.generateDeleteStatement(mapping), this.connection);

            objectsRead = this.reader.readList(mapping, "select * from persistent_object order by id", this.connection);
            assertEquals(0, objectsRead.size(), "List should be empty");

        } finally {
            this.writer.deleteByPrimaryKey(mapping, new Long(1), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(2), this.generator.generateDeleteStatement(mapping), this.connection);
        }
    }




    @Test
    public void testDeleteByPrimaryKey() throws Exception{
        PersistentObject object = null;
        IObjectMapping mapping = null;
        try {
            Environment.executeSql("insert into persistent_object(id, name, objectValue) values(1, 'name1', 'value1')");
            Environment.executeSql("insert into persistent_object(id, name, objectValue) values(2, 'name2', 'value2')");

//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            object = (PersistentObject) this.reader.readByPrimaryKey(
                    mapping, new Long(1), this.generator.generateReadByPrimaryKeyStatement(mapping), connection);
            assertNotNull(object, "1 should exist");
            object = (PersistentObject) this.reader.readByPrimaryKey(
                    mapping, new Long(2), this.generator.generateReadByPrimaryKeyStatement(mapping), connection);
            assertNotNull(object, "2 should exist");

            this.writer.deleteByPrimaryKey(mapping, new Long(1), this.generator.generateDeleteStatement(mapping), connection);
            object = (PersistentObject) this.reader.readByPrimaryKey(
                    mapping, new Long(1), this.generator.generateReadByPrimaryKeyStatement(mapping), connection);
            assertNull(object, "1 should be deleted");
            object = (PersistentObject) this.reader.readByPrimaryKey(
                    mapping, new Long(2), this.generator.generateReadByPrimaryKeyStatement(mapping), connection);
            assertNotNull(object, "2 should still exist");

            this.writer.deleteByPrimaryKey(mapping, new Long(2), this.generator.generateDeleteStatement(mapping), connection);
            object = (PersistentObject) this.reader.readByPrimaryKey(
                    mapping, new Long(1), this.generator.generateReadByPrimaryKeyStatement(mapping), connection);
            assertNull(object, "1 should be deleted");
            object = (PersistentObject) this.reader.readByPrimaryKey(
                    mapping, new Long(2), this.generator.generateReadByPrimaryKeyStatement(mapping), connection);
            assertNull(object, "2 should be deleted");
        } finally {
            Environment.executeSql("delete from persistent_object where id = 1");
            Environment.executeSql("delete from persistent_object where id = 2");
//            JdbcUtil.close(connection);
        }
    }

    @Test
    public void testDeleteByPrimaryKeysBatch() throws Exception{
        PersistentObject object1 = new PersistentObject();
        PersistentObject object2 = new PersistentObject();

        IObjectMapping mapping = null;
        List objects     = new ArrayList();
        List primaryKeys = new ArrayList();
        List objectsRead = null;

        try {
//            this.connection = Environment.getConnection();
            mapping = this.mapper.mapToTable(PersistentObject.class, null, this.connection, null, null);

            if(mapping.getGetterMapping("autoColumn") != null){
                mapping.getGetterMapping("autoColumn").setAutoGenerated(true);
            } else if(mapping.getGetterMapping("AUTOCOLUMN") != null){
                mapping.getGetterMapping("AUTOCOLUMN").setAutoGenerated(true);
            }

            object1.setId(1);
            object1.setName("name1");
            objects.add(object1);
            primaryKeys.add(new Long(1));

            object2.setId(2);
            object2.setName("name2");
            objects.add(object2);
            primaryKeys.add(new Long(2));

            this.writer.insertBatch(mapping, objects, this.generator.generateInsertStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKeysBatch(mapping, primaryKeys, this.generator.generateDeleteStatement(mapping), this.connection);

            objectsRead = this.reader.readList(mapping, "select * from persistent_object order by id", this.connection);
            assertEquals(0, objectsRead.size(), "List should be empty");
        } finally {
            this.writer.deleteByPrimaryKey(mapping, new Long(1), this.generator.generateDeleteStatement(mapping), this.connection);
            this.writer.deleteByPrimaryKey(mapping, new Long(2), this.generator.generateDeleteStatement(mapping), this.connection);
        }
    }


    protected void assertObject1ReadCorrectly(PersistentObject object) throws Exception{
        assertEquals(1     , object.getId(), "id    retrieved wrong");
        assertEquals("name", object.getName(), "name  retrieved wrong");
        assertEquals(null  , object.getObjectValue(), "value retrieved wrong");
        assertEquals(null, object.getObject(), "object should not be retrieved");
        if(Environment.DATABASE == Environment.MYSQL){
            assertNotNull(object.getAutoColumn(),"auto column should not be null");
            assertFalse (object.getAutoColumn().equals(this.dateFormat.parse("2004-01-01")),
                    "auto column should have auto generated date");
        }

        assertTrue(object.wasResultSetConstructorCalled(), "ResultSet constructor not called");
    }

}
