package com.jenkov.db.test.mapping;

import com.jenkov.db.impl.mapping.CustomObjectMapperBase;
import com.jenkov.db.impl.mapping.ObjectMapping;
import com.jenkov.db.impl.mapping.ObjectMappingKey;
import com.jenkov.db.impl.mapping.Key;
import com.jenkov.db.impl.mapping.method.StringGetterMapping;
import com.jenkov.db.itf.mapping.ICustomObjectMapper;
import com.jenkov.db.itf.mapping.IGetterMapping;
import com.jenkov.db.test.objects.PersistentObject;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author Jakob Jenkov - Copyright 2005 Jenkov Development
 */
public class ObjectMappingKeyTest {

    @Test
    public void testCreateInstance_equals(){
        ObjectMappingKey key1 = ObjectMappingKey.createInstance(PersistentObject.class);

        assertTrue(key1.getId() >= 0, "wrong id"  );
        assertEquals(PersistentObject.class, key1.getObjectClass(), "wrong class");

        ObjectMappingKey key2 = ObjectMappingKey.createInstance(PersistentObject.class);
        assertTrue(key2.getId() > key1.getId(), "wrong id" );
        assertEquals(PersistentObject.class, key2.getObjectClass(), "wrong class");

        assertTrue(key1.equals(key1));
        assertTrue(key2.equals(key2));
        assertFalse(key1.equals(key2));
        assertFalse(key2.equals(key1));

        assertFalse(key1.equals(null));
        assertFalse(key1.equals(""));
    }

    @Test
    public void testCreateInstance_classCustomMapper(){
        ICustomObjectMapper mapper = new CustomObjectMapperBase(){};
        ObjectMappingKey key1 = ObjectMappingKey.createInstance(PersistentObject.class, mapper);

        assertEquals(PersistentObject.class, key1.getObjectClass());
        assertSame(mapper, key1.getCustomObjectMapper());
    }

    @Test
    public void testCreateInstanceForAutoGeneratedColumns () throws Exception{
        ObjectMappingKey key1 = ObjectMappingKey.createInstanceForAutoGeneratedColumns(PersistentObject.class, new String[]{"id", "id2"});
        assertNotNull(key1.getCustomObjectMapper());

        ObjectMapping objectMapping = new ObjectMapping();
        IGetterMapping getterMapping1 = new StringGetterMapping();
        getterMapping1.setColumnName("id");
        getterMapping1.setAutoGenerated(false);
        getterMapping1.setObjectMethod( getClass().getMethod("toString", null));
        objectMapping.addGetterMapping(getterMapping1);

        IGetterMapping getterMapping2 = new StringGetterMapping();
        getterMapping2.setColumnName("id2");
        getterMapping2.setAutoGenerated(false);
        getterMapping2.setObjectMethod( getClass().getMethod("toString", null));
        objectMapping.addGetterMapping(getterMapping2);

        key1.getCustomObjectMapper().modify(key1, objectMapping);
        assertTrue(objectMapping.getGetterMapping("id").isAutoGenerated());
        assertTrue(objectMapping.getGetterMapping("id2").isAutoGenerated());


        key1 = ObjectMappingKey.createInstanceForAutoGeneratedColumns(PersistentObject.class, new String[]{"id", "id2"});
        assertNotNull(key1.getCustomObjectMapper());

        getterMapping1.setAutoGenerated(false);
        getterMapping2.setAutoGenerated(false);
        assertFalse(objectMapping.getGetterMapping("id").isAutoGenerated());
        assertFalse(objectMapping.getGetterMapping("id2").isAutoGenerated());

        key1.getCustomObjectMapper().modify(key1, objectMapping);
        assertTrue(objectMapping.getGetterMapping("id").isAutoGenerated());
        assertTrue(objectMapping.getGetterMapping("id2").isAutoGenerated());

    }

    @Test
    public void testCreateInstanceForAutoGeneratedPrimaryKey() throws Exception{
        ObjectMappingKey key1 = ObjectMappingKey.createInstanceForAutoGeneratedPrimaryKey(PersistentObject.class);
        assertEquals(PersistentObject.class, key1.getObjectClass());


        ObjectMapping objectMapping = new ObjectMapping();
        IGetterMapping pkGetterMapping = new StringGetterMapping();
        pkGetterMapping.setColumnName("id");
        pkGetterMapping.setAutoGenerated(false);
        pkGetterMapping.setObjectMethod( getClass().getMethod("toString", null));
        objectMapping.addGetterMapping(pkGetterMapping);
        objectMapping.setPrimaryKey(new Key("id"));

        ICustomObjectMapper mapper1 = key1.getCustomObjectMapper();
        assertNotNull(mapper1);
        mapper1.modify(key1, objectMapping);
        assertTrue(objectMapping.getGetterMapping("id").isAutoGenerated());

        ObjectMappingKey key2 = ObjectMappingKey.createInstanceForAutoGeneratedPrimaryKey(PersistentObject.class);
        pkGetterMapping.setAutoGenerated(false);
        assertFalse(objectMapping.getGetterMapping("id").isAutoGenerated());
        key2.getCustomObjectMapper().modify(key2, objectMapping);
        assertTrue(objectMapping.getGetterMapping("id").isAutoGenerated());
    }


    @Test
    public void testGetCustomObjectMapper(){
        ObjectMappingKey key1 = ObjectMappingKey.createInstance(PersistentObject.class);
        assertNull(key1.getCustomObjectMapper());

        ICustomObjectMapper mapper = new CustomObjectMapperBase(){};
        ObjectMappingKey key2 = ObjectMappingKey.createInstance(PersistentObject.class, mapper);
        assertSame(mapper, key2.getCustomObjectMapper());
    }

    @Test
    public void testToString(){
        ObjectMappingKey key1 = ObjectMappingKey.createInstance(PersistentObject.class);
        assertTrue(key1.toString().indexOf("id = ") > -1);
        assertTrue(key1.toString().indexOf("class com.jenkov.db.test.objects.PersistentObject") > -1);

        ObjectMappingKey key2 = ObjectMappingKey.createInstance(PersistentObject.class);
        assertTrue(key2.toString().indexOf("id = ") > -1);
        assertTrue(key2.toString().indexOf("class com.jenkov.db.test.objects.PersistentObject") > -1);
    }

}
