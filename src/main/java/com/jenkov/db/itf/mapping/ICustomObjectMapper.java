package com.jenkov.db.itf.mapping;

import com.jenkov.db.itf.PersistenceException;

/**
 * A custom object mapper can assist the IGenericDao instances with the mapping
 * of classes to database tables. A custom object mapper has 3 options:
 *
 * <ol>
 * <li>Create a complete mapping manually, programmatically.
 *     Useful when the objects to map
 *     do not match any tables in the database. Either because the names are too different,
 *     or for instance if you are mapping a class to an SQL query (select sum(...) from...)
 *     where the columns in the query do not exist in any table.</li>
 *
 * <li>Only provide the table name which the given class is to be mapped to.
 *     Useful when the getters / setters match the column names, but the class and
 *     table names don't match. For instance mapping Employee.class to table "persons".
 *     </li>
 *
 * <li>Modify the mapping generated by the object mapper, after it was generated,
 *     but before it is used.
 *     This is very useful if you need to add extra information to an
 *     auto-generated object mapping,
 *     for instance a getter / setter that needs to be mapped to a column that has
 *     a name that cannot be guessed. Or, for instance to mark on the primary key
 *     getter mapping of the object mapping, that the primary key is autogenerated
 *     by the database. The object mapper is not yet capable of auto-detecting
 *     auto-generated columns. This is because it is missing in JDBC.
 *     </li>
 *</ol>
 *
 * If a custom mapper does nothing (returns null for all three assisting methods)
 * the object mapping will be fully auto-generated.
 *
 * @author Jakob Jenkov,
 *         Copyright 2004 Jenkov Development
 */
public interface ICustomObjectMapper {


    /**
     * Creates an object mapping for the given object mapping key.
     * @param objectMappingKey The object mapping key to create an object mapping for
     * @return The created object mapping.
     * @throws PersistenceException If returning an object mapping for the given object mapping key fails.
     */
    public IObjectMapping getObjectMapping(Object objectMappingKey) throws PersistenceException;

    /**
     * Returns the table name for a given object mapping - as represented by a given object mapping key.
     * @param objectMappingKey The object mapping to obtain the table name for.
     * @return The table name the object mapping of the given object mapping key is mapped to.
     * @throws PersistenceException If returning the table name for the given object mapping key fails.
     */
    public String getTableName(Object objectMappingKey) throws PersistenceException;


    public void modify(Object objectMappingKey, IObjectMapping mapping) throws PersistenceException;
}
